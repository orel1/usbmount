#!/bin/sh
# This script mounts USB mass storage devices when they are plugged in
# and unmounts them when they are removed.
# Copyright © 2004, 2005 Martin Dickopp
# Copyright © 2008-2012 Rogério Theodoro de Brito
#
# This file is free software; the copyright holder gives unlimited
# permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.
#
set -e
exec > /dev/null 2>&1

######################################################################
# Auxiliary functions

# Log a string via the syslog facility.
log()
{
	VERBOSE="$( echo $VERBOSE | tr '[:upper:]' '[:lower:]' )"
	case "$1" in
		err)
			logger -p user.$1 -t usbmount[$$] -- $2 && exit 1 ;;
		warning)
			logger -p user.$1 -t usbmount[$$] -- $2 ;;
		info)
			case "$VERBOSE" in
				yes|debug) logger -p user.$1 -t usbmount[$$] -- $2 ;;
			esac ;;
		debug)
			case "$VERBOSE" in
				debug) logger -p user.$1 -t usbmount[$$] -- $2 ;;
			esac ;;
	esac
}


# Test if the first parameter is in the list given by the second
# parameter.
in_list()
{
	for v in $2; do
		[ "$1" != "$v" ] || return 0
	done
	return 1
}


######################################################################
# Main program

# Default values for configuration variables.
ENABLED=1
MOUNTPOINTS=
FILESYSTEMS=
MOUNTOPTIONS=
FS_MOUNTOPTIONS=
VERBOSE=no

if [ -r /etc/usbmount/usbmount.conf ]; then
	. /etc/usbmount/usbmount.conf
	log debug "loaded usbmount configurations"
fi

if [ "${ENABLED:-1}" -eq 0 ]; then
	log info "usbmount is disabled, see /etc/usbmount/usbmount.conf"
	exit 0
fi

# Per Policy 9.3.2, directories under /var/run have to be created
# after every reboot.
if [ ! -e /var/run/usbmount ]; then
	mkdir -p /var/run/usbmount
	log debug "creating /var/run/usbmount directory"
fi

umask 022


if [ "$1" = add ]; then

	# Acquire lock.
	log debug "trying to acquire lock /var/run/usbmount/.mount.lock"
	lockfile-create --retry 3 /var/run/usbmount/.mount || \
		log err "cannot acquire lock /var/run/usbmount/.mount.lock"
	trap '( lockfile-remove /var/run/usbmount/.mount )' 0
	log debug "acquired lock /var/run/usbmount/.mount.lock"

	# Query udev for the expected device information (as we are now running in
	# a service's context and the env variables have been lost)
	if udevadm info --query=name --name="$DEVNAME" > /dev/null 2>&1 ; then
		# Additional variables provided by udev are prefixed by "UDEV_"
		eval $( udevadm info --query=env --export --export-prefix="UDEV_" "$DEVNAME" )
		# udev converts some characters, including spaces, into hexadecimal. We
		# want them as is, so we use 'echo -e' to interpret them.
		label="$( /bin/echo -e $UDEV_ID_FS_LABEL_ENC )"
		# In /etc/fstab, since spaces are used to delimit fields, if a field
		# contains spaces, these spaces must be replaced by \040.
		label_fstab="$( echo $label | sed 's/ /\\\\040/g' )"
	else
		log err "Device $DEVNAME not found"
	fi

	if ! echo $UDEV_ID_FS_USAGE | egrep -q "(filesystem|disklabel)"; then
		log debug "$DEVNAME is a $UDEV_DEVTYPE"
		log info "$DEVNAME does not contain a filesystem or disklabel"
		exit 0
	fi

	# To mount the device, try using the specifications in /etc/fstab first,
	# otherwise use the default mount options.

	# Identify the device by kernel name descriptors (ex. /dev/sda1)
	if egrep -q "^[[:blank:]]*$DEVNAME" /etc/fstab; then
		log info "executing command: mount $DEVNAME"
		mount $DEVNAME || log err "mount by DEVNAME with $DEVNAME wasn't successful; return code $?"

	# Identify the device by UUID
	elif grep -q "^[[:blank:]]*UUID=$UDEV_ID_FS_UUID" /etc/fstab; then
		log info "executing command: mount -U $UDEV_ID_FS_UUID"
		mount -U $UDEV_ID_FS_UUID || log err "mount by UUID with $UDEV_ID_FS_UUID wasn't successful; return code $?"

	# Identify the device by LABEL
	elif grep -q "^[[:blank:]]*LABEL=$label_fstab" /etc/fstab; then
		log info "executing command: mount -L $label"
		mount -L "$label" || log err "mount by LABEL with $label wasn't successful; return code $?"

	else
		log debug "$DEVNAME contains filesystem type $UDEV_ID_FS_TYPE"

		# Test if the filesystem type is in the list of filesystem
		# types to mount.
		if in_list "$UDEV_ID_FS_TYPE" "$FILESYSTEMS"; then
			# Search an available mountpoint.
			for v in $MOUNTPOINTS; do
				if [ -d "$v" ] && ! grep -q "^[^ ][^ ]*  *$v " /proc/mounts; then
					mountpoint="$v"
					log debug "mountpoint $mountpoint is available for $DEVNAME"
					break
				fi
			done
			if [ -n "$mountpoint" ]; then
				# Determine mount options.
				options=
				for v in $FS_MOUNTOPTIONS; do
					if expr "$v" : "-fstype=$UDEV_ID_FS_TYPE,."; then
						options="$(echo "$v" | sed 's/^[^,]*,//')"
						break
					fi
				done
				if [ -n "$MOUNTOPTIONS" ]; then
					options="$MOUNTOPTIONS${options:+,$options}"
				fi

				# Mount the filesystem.
				log info "executing command: mount -t$UDEV_ID_FS_TYPE ${options:+-o$options} $DEVNAME $mountpoint"
				mount "-t$UDEV_ID_FS_TYPE" "${options:+-o$options}" "$DEVNAME" "$mountpoint"

				# Run hook scripts; ignore errors.
				export UM_DEVICE="$DEVNAME"
				export UM_MOUNTPOINT="$mountpoint"
				export UM_FILESYSTEM="$UDEV_ID_FS_TYPE"
				export UM_MOUNTOPTIONS="$options"
				export UM_VENDOR="$UDEV_ID_VENDOR"
				export UM_MODEL="$UDEV_ID_MODEL"
				log info "executing command: run-parts /etc/usbmount/mount.d"
				run-parts /etc/usbmount/mount.d || :
			else
				# No suitable mount point found.
				log warning "no mountpoint found for $DEVNAME"
			fi
		fi
	fi
elif [ "$1" = remove ]; then

	# A block or partition device has been removed.
	# Test if it is mounted.
	while read device mountpoint fstype remainder; do
		if [ "$DEVNAME" = "$device" ]; then
			# If the mountpoint and filesystem type are maintained by
			# this script, unmount the filesystem.
			if in_list "$mountpoint" "$MOUNTPOINTS" &&
				in_list "$fstype" "$FILESYSTEMS"; then
				log debug "$DEVNAME contains filesystem type $fstype"
				log info "executing command: umount -l $mountpoint"
				umount -l "$mountpoint"

				# Run hook scripts; ignore errors.
				export UM_DEVICE="$DEVNAME"
				export UM_MOUNTPOINT="$mountpoint"
				export UM_FILESYSTEM="$fstype"
				log info "executing command: run-parts /etc/usbmount/umount.d"
				run-parts /etc/usbmount/umount.d || :
			fi
			break
		fi
	done < /proc/mounts
else
	log err "unexpected: action '$1'"
fi

log debug "usbmount execution finished"

# vim: noet
