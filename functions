#
# Common usbmount functions.
# These functions are used by usbmount itself, and are also usable in
# hooks. To use them in your own hooks scripts, you have to source this
# file from within your scripts.
#


log()
#----------------------------------------------------------------------
#  DESCR: Log a string via the syslog user facility, depending of the
#         verbosity level define in the configuration file
#         (yes/no/debug).
#  PARAM: $1> syslog level (err/warning/info/debug)
#         $2> The string to log (inside double quote)
# RETURN: -
#----------------------------------------------------------------------
{
	VERBOSE="$( echo $VERBOSE | tr '[:upper:]' '[:lower:]' )"

	if [ "${0%/*}" = "/usr/share/usbmount" ]; then
		# call by usbmount
		log_command="logger -p user.$1 -t usbmount[$$] -- $DEVNAME $2"
	else
		# call by a hook
		log_command="logger -p user.$1 -t usbmount[$$] -- $UM_DEVICE (hook) $2"
	fi

	if [ "$VERBOSE" = "debug" ]; then
		$log_command
	elif [ "$VERBOSE" = "yes" ]; then
		case "$1" in
			err) $log_command && exit 1 ;;
			info|warning) $log_command  ;;
		esac
	elif [ "$VERBOSE" = "no" ]; then
		case "$1" in
			err) $log_command && exit 1 ;;
			warning) $log_command  ;;
		esac
	fi
}

chk_cmd()
#----------------------------------------------------------------------
#  DESCR: Check if a command is present and executable
#  PARAM: $1> Each command to test, separated by spaces
# RETURN: The return code is the total number of errors encountered. If
#         all the tested commands are executables the return code is 0
#----------------------------------------------------------------------
{
	return_count=0
	for item in "$@";
	do
		if ! [ -x "$( command -v $item )" ]; then
			log debug "Command not found ($item)"
			return_count="$(( $return_count + 1 ))"
		fi
	done
	return $return_count
}


# vim: noet ft=sh
